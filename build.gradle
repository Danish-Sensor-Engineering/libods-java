/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.2.2/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Code coverage of tests
    id 'jacoco'

    // For publishing to maven repository
    id 'maven-publish'

    // For publishing library to bintray
    id "com.jfrog.bintray" version "1.8.4"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api('com.fazecast:jSerialComm:[2.0.0,3.0.0)')

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")

    runtimeOnly("org.slf4j:slf4j-simple:${slf4jVersion}")

    // Use the latest Groovy version for Spock testing
	testRuntimeOnly("org.slf4j:slf4j-simple:${slf4jVersion}")
    testImplementation("org.codehaus.groovy:groovy-all:${groovyVersion}")

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation("org.spockframework:spock-core:${spockVersion}")
    testImplementation('junit:junit:4.12')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives']
    pkg {
        repo = "libs"
        name = "libsensor"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = licenses
        publish = true
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    group = "verification"
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}
test.finalizedBy jacocoTestReport

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            includes = [ 'biz.nellemann.libsensor.*' ]
            excludes = [ 'biz.nellemann.libsensor.SerialDemo', 'biz.nellemann.libsensor.SerialLibrary' ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
